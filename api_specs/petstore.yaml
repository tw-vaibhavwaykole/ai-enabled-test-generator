 openapi: 3.0.0
info:
  title: Pet Store API
  description: >
    This API manages a pet store's inventory and orders, allowing clients to view, add, update, and delete pets,
    as well as place and retrieve orders. It is designed to facilitate both functional and security test generation.
  version: "1.0.0"
servers:
  - url: http://localhost:8080/api
paths:
  /pets:
    get:
      summary: Retrieve a list of pets
      operationId: getPets
      parameters:
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfully retrieved list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
    post:
      summary: Add a new pet
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Pet added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /pets/{petId}:
    parameters:
      - name: petId
        in: path
        required: true
        description: The unique ID of a pet
        schema:
          type: integer
          format: int64
    get:
      summary: Find pet by ID
      operationId: getPetById
      responses:
        '200':
          description: Pet details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
    put:
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object with updated information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
    delete:
      summary: Delete a pet
      operationId: deletePet
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found
  /orders:
    post:
      summary: Place an order for a pet
      operationId: placeOrder
      requestBody:
        description: Order object that needs to be placed
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    get:
      summary: Retrieve all orders
      operationId: getOrders
      responses:
        '200':
          description: Successfully retrieved list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        description: ID of order to retrieve
        schema:
          type: integer
          format: int64
    get:
      summary: Get order by ID
      operationId: getOrderById
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int32
        status:
          type: string
          enum: [available, pending, sold]
    Order:
      type: object
      required:
        - id
        - petId
        - quantity
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [placed, approved, delivered]
          default: placed
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: X-API-Key
security:
  - api_key: [] 